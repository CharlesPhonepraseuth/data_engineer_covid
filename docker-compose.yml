version: '3.8'


x-airflow-common: &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.1.1}
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: ${AIRFLOW__CORE__SQL_ALCHEMY_CONN}
    AIRFLOW__CELERY__RESULT_BACKEND: ${AIRFLOW__CELERY__RESULT_BACKEND}
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ""
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__API__AUTH_BACKEND: "airflow.api.auth.backend.basic_auth"
    # _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:- scikit-learn scipy joblib}
    
    APP_POSTGRES_CONN: ${APP_POSTGRES_CONN}
  volumes:
    - ./app/airflow/dags:/opt/airflow/dags
    - ./app/airflow/logs:/opt/airflow/logs
    - ./app/airflow/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    redis:
      condition: service_healthy
    postgres-airflow:
      condition: service_healthy
    postgres:
      condition: service_healthy


services:

  postgres:
    container_name: pg_container
    image: postgres
    build: ./docker/postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", '${POSTGRES_DB}']
      interval: 5s
      retries: 5
    restart: always
    ports:
      - ${POSTGRES_HTTP_PORT}:${POSTGRES_HTTP_PORT}
    networks:
      - lan


  pg-init-seeder:
    container_name: pg-init-seeder
    build:
      context: .
      dockerfile: ./docker/pg-init-seeder/Dockerfile
    volumes:
      - ./docker/pg-init-seeder/seeder.py:/app/seeder.py
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_HTTP_PORT=${POSTGRES_HTTP_PORT}
    networks:
      - lan
    depends_on:
      postgres:
        condition: service_healthy


  pgadmin:
    container_name: pgadmin4_container
    image: dpage/pgadmin4
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - ${PGADMIN_HTTP_PORT}:80
    networks:
      - lan
    depends_on:
      postgres:
        condition: service_healthy


  elasticsearch:
    container_name: es-container
    image: docker.elastic.co/elasticsearch/elasticsearch:8.1.2
    environment:
      - xpack.security.enabled=${XPACK_SECURITY_ENABLED}
      - discovery.type=${DISCOVERY_TYPE}
      - ES_JAVA_OPTS=${ES_JAVA_OPTS}
      - LOCALHOST_IP=${LOCALHOST_IP}
      - ELASTICSEARCH_HTTP_PORT=${ELASTICSEARCH_HTTP_PORT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: curl -s http://${LOCALHOST_IP}:${ELASTICSEARCH_HTTP_PORT} >/dev/null || exit 1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    ports:
      - ${ELASTICSEARCH_HTTP_PORT}:${ELASTICSEARCH_HTTP_PORT}
      - "9300:9300"
    networks:
      - lan


  es-init-indexer:
    container_name: es-init-indexer
    build:
      context: .
      dockerfile: ./docker/es-init-indexer/Dockerfile
    environment:
      - ELASTICSEARCH_HTTP_PORT=${ELASTICSEARCH_HTTP_PORT}
      - NY_TIMES_API_KEY=${NY_TIMES_API_KEY}
    networks:
      - lan
    depends_on:
      elasticsearch:
        condition: service_healthy


  es-init-seeder:
    container_name: es-init-seeder
    build:
      context: .
      dockerfile: ./docker/es-init-seeder/Dockerfile
    environment:
      - ELASTICSEARCH_HTTP_PORT=${ELASTICSEARCH_HTTP_PORT}
      - NY_TIMES_API_KEY=${NY_TIMES_API_KEY}
    networks:
      - lan
    depends_on:
      es-init-indexer:
        condition: service_started


  kibana:
      container_name: kb-container
      image: docker.elastic.co/kibana/kibana:8.1.2
      environment:
        - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOSTS}
      ports:
        - ${KIBANA_HTTP_PORT}:${KIBANA_HTTP_PORT}
      networks:
        - lan
      depends_on:
        elasticsearch:
          condition: service_healthy


  dashboard:
      container_name: dashboard
      build:
        context: .
        dockerfile: ./docker/dashboard/Dockerfile
      volumes:
        - ./app/dashboard:/code/dashboard
        - ./app/common/utils:/code/common/utils
      environment:
        - DASH_HTTP_PORT=${DASH_HTTP_PORT}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_HOST=${POSTGRES_HOST}
        - POSTGRES_HTTP_PORT=${POSTGRES_HTTP_PORT}
      ports:
        - ${DASH_HTTP_PORT}:${DASH_HTTP_PORT}
      networks:
        - lan


  fastapi:
      container_name: fastapi
      build: 
        context: .
        dockerfile: ./docker/fastapi/Dockerfile
      volumes:
        - ./app/common/utils:/code/common/utils
        - ./app/fastapi/router.py:/code/app/router.py
        - ./app/fastapi/controllers:/code/app/controllers
      environment:
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_HOST=${POSTGRES_HOST}
        - POSTGRES_HTTP_PORT=${POSTGRES_HTTP_PORT}
        - ELASTICSEARCH_HTTP_PORT=${ELASTICSEARCH_HTTP_PORT}
      ports:
        - "8000:8000"
      networks:
        - lan


  notebook:
      container_name: notebook
      build:
        context: .
        dockerfile: ./docker/notebook/Dockerfile
      volumes:
        - ./app/notebook:/home/jupyter/work
      ports:
        - ${NOTEBOOK_HTTP_PORT}:${NOTEBOOK_HTTP_PORT}
      networks:
        - lan


# Airflow containers
  postgres-airflow:
    container_name: postgres-airflow
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER_AIRFLOW}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_AIRFLOW}
      POSTGRES_DB: ${POSTGRES_DB_AIRFLOW}
    volumes:
      - postgres-airflow-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - lan


  redis:
    container_name: redis
    image: redis:latest
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always
    networks:
      - lan


  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://${LOCALHOST_IP}:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - lan


  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"',
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - lan


  airflow-worker:
    <<: *airflow-common
    container_name: airflow-worker
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - lan


  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    networks:
      - lan


  flower:
    <<: *airflow-common
    container_name: flower
    command: celery flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://${LOCALHOST_IP}:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - lan


volumes:
  postgres-airflow-db-volume:


networks:
  lan:
